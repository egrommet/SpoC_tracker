<!-- Asset Recovery Visualization -->
<div class="soc-chart-container">
    <div id="asset-recovery-chart" class="soc-chart">
        <h2 class="soc-chart-headline">Criminal Assets Recovered</h2>
        <p class="soc-chart-subheadline">Annual value in millions of pounds sterling, England, Wales and Northern Ireland</p>
        <div class="soc-visualization-area"></div>
        <div class="soc-chart-error" style="display:none">Error loading chart data</div>
        <div class="soc-chart-loading">Loading data...</div>
    </div>
</div>

<style>
.soc-chart-container {
    max-width: 645px;
    width: 645px;
    margin: 0 auto;
    position: relative;
    font-family: "Montserrat", Sans-Serif;
    overflow: hidden;
    box-sizing: border-box;
}

.soc-tooltip {
    position: fixed;
    background: rgba(255, 255, 255, 0.98);
    border: 1px solid #ddd;
    border-radius: 4px;
    padding: 8px 12px;
    font-family: "Montserrat", Sans-Serif;
    font-size: 12px;
    box-shadow: 0 2px 4px rgba(0,0,0,0.1);
    z-index: 1000;
    pointer-events: none;
    white-space: nowrap;
    max-width: 200px;
    opacity: 0;
    transition: opacity 0.2s ease;
}

.soc-chart {
    position: relative;
    width: 100%;
    padding-top: 1rem;
}

.soc-chart-headline {
    font-size: 20px;
    font-weight: bold;
    color: #000000;
    margin: 0 0 1.5rem 0;
    padding: 0;
    line-height: 1.4;
}

.soc-chart-subheadline {
    font-size: 16px;
    color: #707071;
    margin: 0 0 1.5rem 0;
    padding: 0;
    line-height: 1.4;
}

.soc-visualization-area {
    position: relative;
    width: 100%;
    min-height: 400px;
}

.soc-chart-error, .soc-chart-loading {
    position: absolute;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
    font-size: 14px;
}

.soc-chart-error {
    color: #9F1D32;
}

.soc-chart-loading {
    color: #707071;
}

.soc-line {
    fill: none;
    stroke: #24284B;
    stroke-width: 2;
}

.soc-dot {
    fill: white;
    stroke: #24284B;
    stroke-width: 2;
}

.soc-axis text {
    font-size: 14px;
    fill: #707071;
    font-weight: 400;
}

.soc-axis line {
    stroke: #E5E7EB;
}

.soc-axis path {
    stroke: #707071;
}

.soc-grid line {
    stroke: #e0e0e0;
    stroke-opacity: 0.7;
    shape-rendering: crispEdges;
}

.soc-grid path {
    stroke-width: 0;
}

.soc-source-text {
    font-size: 16px;
    fill: #707071;
    margin-top: 1rem;
}
</style>

<script src="https://cdnjs.cloudflare.com/ajax/libs/d3/7.8.5/d3.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/PapaParse/5.4.1/papaparse.min.js"></script>

<script>
(function() {
    class AssetRecoveryChart {
        constructor() {
            this.width = 645;
            this.margin = { top: 20, right: 30, bottom: 90, left: 80 };
            this.height = 500;
            this.effectiveWidth = this.width - this.margin.left - this.margin.right;
            this.effectiveHeight = this.height - this.margin.top - this.margin.bottom;
            
            this.errorEl = document.querySelector("#asset-recovery-chart .soc-chart-error");
            this.loadingEl = document.querySelector("#asset-recovery-chart .soc-chart-loading");
            
            this.initialize();
        }

        initialize() {
            this.tooltip = d3.select("body")
                .append("div")
                .attr("class", "soc-tooltip");

            this.createChart();
            this.loadData();
        }

        createChart() {
            d3.select("#asset-recovery-chart .soc-visualization-area").selectAll("svg").remove();
            
            this.svg = d3.select("#asset-recovery-chart .soc-visualization-area")
                .append("svg")
                .attr("viewBox", `0 0 645 ${this.height}`)
                .attr("width", 645)
                .attr("height", this.height)
                .append("g")
                .attr("transform", `translate(${this.margin.left},${this.margin.top})`);
        }

                    async loadData() {
            try {
                this.loadingEl.style.display = 'block';
                this.errorEl.style.display = 'none';

                const response = await fetch('/wp-content/uploads/2025/01/asset-recovery-data.csv');
                if (!response.ok) throw new Error(`HTTP error! status: ${response.status}`);
                const csvText = await response.text();
                
                const results = Papa.parse(csvText, {
                    header: true,
                    dynamicTyping: true,
                    skipEmptyLines: true
                });
                
                if (results.errors.length > 0) {
                    throw new Error('CSV parsing errors: ' + results.errors.map(e => e.message).join(', '));
                }

                const processedData = results.data
                    .map(d => ({
                        year: d.year || '',
                        value: parseFloat(d.value) || 0
                    }))
                    .filter(d => d.year && !isNaN(d.value));
                
                if (!processedData.length) {
                    throw new Error('No valid data after processing');
                }

                processedData.sort((a, b) => a.year.localeCompare(b.year));
                this.renderChart(processedData);
                this.loadingEl.style.display = 'none';
                if (this.errorEl) this.errorEl.style.display = 'none';
            } catch (error) {
                console.error('Error loading or processing data:', error);
                this.loadingEl.style.display = 'none';
                if (this.errorEl) this.errorEl.style.display = 'block';
            }
        }

        renderChart(data) {
            if (!data?.length) return;

            const x = d3.scalePoint()
                .range([0, this.effectiveWidth])
                .domain(data.map(d => d.year))
                .padding(0.5);

            const y = d3.scaleLinear()
                .domain([0, d3.max(data, d => d.value) * 1.1])
                .range([this.effectiveHeight, 0]);

            // Add gridlines
            this.svg.append("g")
                .attr("class", "soc-grid")
                .call(d3.axisLeft(y)
                    .tickSize(-this.effectiveWidth)
                    .tickFormat(""))
                .lower();

            // Add axes
            this.svg.append("g")
                .attr("class", "soc-axis")
                .attr("transform", `translate(0,${this.effectiveHeight})`)
                .call(d3.axisBottom(x))
                .selectAll("text")
                .style("text-anchor", "end")
                .attr("dx", "-.8em")
                .attr("dy", ".15em")
                .attr("transform", "rotate(-45)");

            this.svg.append("g")
                .attr("class", "soc-axis")
                .call(d3.axisLeft(y)
                    .tickFormat(d => `£${d}m`));

            // Create the line
            const line = d3.line()
                .x(d => x(d.year))
                .y(d => y(d.value));

            // Add the line path with transition
            const path = this.svg.append("path")
                .datum(data)
                .attr("class", "soc-line")
                .attr("d", line);

            // Animate the line
            const pathLength = path.node().getTotalLength();
            path
                .attr("stroke-dasharray", pathLength)
                .attr("stroke-dashoffset", pathLength)
                .transition()
                .duration(750)
                .attr("stroke-dashoffset", 0);

            // Add dots with transition
            this.svg.selectAll(".soc-dot")
                .data(data)
                .enter()
                .append("circle")
                .attr("class", "soc-dot")
                .attr("cx", d => x(d.year))
                .attr("cy", this.effectiveHeight)
                .attr("r", 4)
                .transition()
                .duration(750)
                .attr("cy", d => y(d.value));

            // Add hover effects
            this.svg.selectAll(".soc-dot")
                .on("mousemove", (event, d) => {
                    this.tooltip
                        .html(`<strong>${d.year}</strong><br/>Value: £${d.value.toLocaleString()}m`)
                        .style("left", `${event.pageX + 10}px`)
                        .style("top", `${event.pageY + 10}px`)
                        .style("opacity", 1);
                })
                .on("mouseout", () => {
                    this.tooltip.style("opacity", 0);
                });

            // Add source attribution
            this.svg.append("text")
                .attr("class", "soc-source-text")
                .attr("x", 0)
                .attr("y", this.effectiveHeight + 80)
                .text("Source: Asset recovery statistics: financial years ending 2019 to 2024");
        }
    }

    // Initialize chart when DOM is ready
    document.addEventListener('DOMContentLoaded', () => {
        new AssetRecoveryChart();
    });
})();
</script>