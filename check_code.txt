<!-- Enforcement Visualization -->
<div class="soc-chart-container">
    <div id="enforcement-chart" class="soc-chart">
        <div class="chart-loading">Loading data...</div>
        <div class="chart-error" style="display:none">Error loading data</div>
        <p class="soc-chart-subheadline">Prosecutions and convictions over time</p>
        <div class="soc-category-selector">
            <label for="category-select" class="soc-category-label">View: </label>
            <select id="category-select" class="soc-category-dropdown">
                <option value="Money Laundering">Money Laundering</option>
                <option value="Fraud">Fraud</option>
                <option value="Bribery">Bribery</option>
                <option value="Misconduct in Public Office">Misconduct in Public Office</option>
            </select>
        </div>
        <div class="soc-visualization-area"></div>
    </div>
</div>

<style>
.soc-chart-container {
    flex-basis: 66.66%;
    max-width: 645px;
    width: 645px;
    margin: 0 auto;
    position: relative;
    font-family: "Montserrat", Sans-Serif;
    overflow: hidden;
    box-sizing: border-box;
}

.soc-chart {
    position: relative;
    width: 100%;
    padding-top: 1rem;
}

.soc-chart-headline {
    font-size: 20px;
    font-weight: bold;
    color: #000000;
    margin: 0 0 1.5rem 0;
    padding: 0;
    line-height: 1.4;
}

.soc-chart-subheadline {
    font-size: 16px;
    color: #707071;
    margin: 0 0 1.5rem 0;
    padding: 0;
    line-height: 1.4;
}

.soc-category-selector {
    margin: 0 0 2rem 0;
    padding: 0;
    font-size: 14px;
    color: #707071;
}

.soc-category-dropdown {
    padding: 2px 6px;
    border: 1px solid #ddd;
    border-radius: 3px;
    font-size: 14px;
    margin-left: 4px;
    cursor: pointer;
    font-family: inherit;
    color: #707071;
}

.soc-visualization-area {
    position: relative;
    width: 100%;
}

.soc-line {
    fill: none;
    stroke-width: 2.5;
    transition: all 0.3s ease;
}
.soc-line-prosecutions { 
    stroke: #24284B !important; 
}
.soc-line-convictions { 
    stroke: #9F1D32 !important; 
}

.soc-dot {
    cursor: pointer;
    transition: all 0.3s ease;
    fill: white;
}
.soc-dot-prosecutions { 
    stroke: #24284B !important;
    stroke-width: 2;
}
.soc-dot-convictions { 
    stroke: #9F1D32 !important;
    stroke-width: 2;
}
.soc-dot:hover { opacity: 0.7; }

.soc-axis text {
    font-size: 14px;
    fill: #707071;
    font-weight: 400;
}

.soc-grid line {
    stroke: #e0e0e0;
    stroke-opacity: 0.7;
    shape-rendering: crispEdges;
}
.soc-grid path {
    stroke-width: 0;
}

.soc-tooltip {
    padding: 8px;
    background: rgba(255, 255, 255, 0.98);
    border: 1px solid #ddd;
    border-radius: 4px;
    font-family: "Montserrat", Sans-Serif;
    font-size: 12px;
    box-shadow: 0 2px 4px rgba(0,0,0,0.1);
    z-index: 1000;
    transition: opacity 0.2s ease;
    position: absolute;
    pointer-events: none;
}

.chart-loading, .chart-error {
    text-align: center;
    padding: 2rem;
    color: #707071;
}
</style>

<script src="https://cdnjs.cloudflare.com/ajax/libs/d3/7.8.5/d3.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/PapaParse/5.4.1/papaparse.min.js"></script>

<script>
(function() {
    class EnforcementTracker {
        constructor(containerId) {
            this.containerId = containerId;
            this.container = d3.select(containerId);
            this.data = null;
            this.currentCategory = 'Money Laundering';
            this.config = {
                margin: { top: 20, right: 120, bottom: 120, left: 80 },
                width: 645,
                height: 500,
                colors: {
                    prosecutions: '#24284B !important',
                    convictions: '#9F1D32 !important'
                }
            };
            this.config.innerWidth = this.config.width - this.config.margin.left - this.config.margin.right;
            this.config.innerHeight = this.config.height - this.config.margin.top - this.config.margin.bottom;
            
            this.initialize();
        }

        async initialize() {
            try {
                await this.loadData();
                this.render();
                this.setupEventListeners();
            } catch (error) {
                console.error('Error initializing tracker:', error);
                this.showError();
            }
        }

        async loadData() {
            try {
                const response = await d3.csv("/wp-content/uploads/2025/01/enforcement-data.csv");
                this.data = response.map(d => ({
                    year: d.year,
                    category: d.category,
                    prosecutions: +d.prosecutions,
                    convictions: +d.convictions
                }));
            } catch (error) {
                console.error('Error loading data:', error);
                throw error;
            }
        }

        showTooltip(event, d) {
            const containerRect = document.querySelector(this.containerId).getBoundingClientRect();
            const scrollTop = window.pageYOffset || document.documentElement.scrollTop;
            const scrollLeft = window.pageXOffset || document.documentElement.scrollLeft;

            const content = `<strong>${d.year}</strong><br/>
                            Prosecutions: ${(+d.prosecutions).toLocaleString()}<br/>
                            Convictions: ${(+d.convictions).toLocaleString()}`;

            this.tooltip.html(content)
                .style("left", `${event.clientX + scrollLeft - containerRect.left + 20}px`)
                .style("top", `${event.clientY + scrollTop - containerRect.top + 20}px`)
                .style("opacity", 1);
        }

        hideTooltip() {
            this.tooltip.style("opacity", 0);
        }

        render() {
            this.container.select(".chart-loading").style("display", "none");
            
            this.tooltip = d3.select("body")
                .append("div")
                .attr("class", "soc-tooltip")
                .style("opacity", 0);

            this.container.insert("h2", ":first-child")
                .attr("class", "soc-chart-headline");

            this.svg = this.container.select(".soc-visualization-area")
                .append("svg")
                .attr("viewBox", `0 0 ${this.config.width} ${this.config.height}`)
                .attr("width", this.config.width)
                .attr("height", this.config.height)
                .append("g")
                .attr("transform", `translate(${this.config.margin.left},${this.config.margin.top})`);

            this.updateChart(this.data.filter(d => d.category === this.currentCategory));
        }

        createLineChart(data) {
            this.svg.selectAll("*").remove();

            const x = d3.scaleBand()
                .range([0, this.config.innerWidth])
                .domain(data.map(d => d.year))
                .padding(0.5);

            const y = d3.scaleLinear()
                .domain([0, d3.max(data, d => Math.max(+d.prosecutions, +d.convictions)) * 1.1])
                .range([this.config.innerHeight, 0]);

            // Add axes
            this.svg.append("g")
                .attr("class", "soc-axis")
                .attr("transform", `translate(0,${this.config.innerHeight})`)
                .call(d3.axisBottom(x))
                .selectAll("text")
                .style("text-anchor", "end")
                .attr("dx", "-.8em")
                .attr("dy", ".15em")
                .attr("transform", "rotate(-45)");

            this.svg.append("g")
                .attr("class", "soc-axis")
                .call(d3.axisLeft(y)
                    .ticks(6)
                    .tickFormat(d => d.toLocaleString()));

            this.svg.append("g")
                .attr("class", "soc-grid")
                .call(d3.axisLeft(y)
                    .ticks(6)
                    .tickSize(-this.config.innerWidth)
                    .tickFormat(""));

            // Add lines
            const lineProsecutions = d3.line()
                .x(d => x(d.year) + x.bandwidth()/2)
                .y(d => y(+d.prosecutions));

            const lineConvictions = d3.line()
                .x(d => x(d.year) + x.bandwidth()/2)
                .y(d => y(+d.convictions));

            this.svg.append("path")
                .datum(data)
                .attr("class", "soc-line soc-line-prosecutions")
                .attr("d", lineProsecutions);

            this.svg.append("path")
                .datum(data)
                .attr("class", "soc-line soc-line-convictions")
                .attr("d", lineConvictions);

            // Add dots
            const dots = this.svg.selectAll(".soc-dot")
                .data(data.concat(data))
                .enter()
                .append("circle")
                .attr("class", (d, i) => `soc-dot soc-dot-${i < data.length ? 'prosecutions' : 'convictions'}`)
                .attr("cx", d => x(d.year) + x.bandwidth()/2)
                .attr("cy", (d, i) => y(i < data.length ? +d.prosecutions : +d.convictions))
                .attr("r", 4);

            // Add legend
            const legendX = this.config.innerWidth - 140;
            const legend = this.svg.append("g")
                .attr("class", "soc-legend")
                .attr("transform", `translate(${legendX}, 0)`);

            const legendData = [
                {name: "Prosecutions", color: "#24284B"},
                {name: "Convictions", color: "#9F1D32"}
            ];

            legendData.forEach((d, i) => {
                const g = legend.append("g")
                    .attr("transform", `translate(0, ${i * 25})`);
                
                // Add colored line
                g.append("line")
                    .attr("x1", 0)
                    .attr("x2", 20)
                    .attr("stroke", d.color)
                    .attr("stroke-width", 2.5)
                    .style("stroke", d.color); // Add explicit style

                g.append("text")
                    .attr("x", 25)
                    .attr("y", 0)
                    .attr("dy", ".35em")
                    .text(d.name)
                    .style("fill", "#707071"); // Add consistent text color
            });

            this.addLineInteraction(data, { x, y });
        }

        addLineInteraction(data, scales) {
            const overlayRect = this.svg.append("rect")
                .attr("class", "soc-overlay")
                .attr("width", this.config.innerWidth)
                .attr("height", this.config.innerHeight)
                .style("fill", "none")
                .style("pointer-events", "all");

            overlayRect.on("mousemove", (event) => {
                const [mouseX] = d3.pointer(event);
                const x = scales.x;
                
                const xValue = x.domain()[Math.floor(mouseX / (this.config.innerWidth / data.length))];
                const d = data.find(d => d.year === xValue);
                
                if (d) {
                    this.showTooltip(event, d);
                }
            });

            overlayRect.on("mouseout", () => this.hideTooltip());
        }

        updateChart(data) {
            if (data.length < 2) {
                console.error('Not enough data to calculate change');
                return;
            }

            const latestData = data[data.length - 1];
            const previousData = data[data.length - 2];
            
            // Calculate changes
            const prosecutionsChange = ((latestData.prosecutions - previousData.prosecutions) / previousData.prosecutions * 100).toFixed(1);
            const convictionsChange = ((latestData.convictions - previousData.convictions) / previousData.convictions * 100).toFixed(1);
            
            // Create headlines
            let headline, subheadline;
            
            // Main headline for prosecutions
            if (prosecutionsChange == 0) {
                headline = `${this.currentCategory} Prosecutions unchanged from ${previousData.year}`;
            } else {
                headline = `${this.currentCategory} Prosecutions ${prosecutionsChange > 0 ? 'up' : 'down'} ${Math.abs(prosecutionsChange)}% on ${previousData.year}`;
            }
            
            // Secondary headline for convictions
            if (convictionsChange == 0) {
                subheadline = `Convictions unchanged from ${previousData.year}`;
            } else {
                subheadline = `Convictions ${convictionsChange > 0 ? 'up' : 'down'} ${Math.abs(convictionsChange)}% on ${previousData.year}`;
            }
            
            // Update headlines
            const headlineEl = this.container.select('.soc-chart-headline');
            const subheadlineEl = this.container.select('.soc-chart-subheadline');
            
            if (!headlineEl.empty()) {
                headlineEl.text(headline);
            }
            if (!subheadlineEl.empty()) {
                subheadlineEl.text(subheadline);
            }

            this.createLineChart(data);
        }

        showError() {
            this.container.select(".chart-loading").style("display", "none");
            this.container.select(".chart-error").style("display", "block");
        }

        setupEventListeners() {
            const select = d3.select("#category-select");
            if (!select.empty()) {
                select.on("change", (event) => {
                    this.currentCategory = event.target.value;
                    if (this.tooltip) {
                        this.tooltip.style("opacity", 0);
                    }
                    const filteredData = this.data.filter(d => d.category === this.currentCategory);
                    this.updateChart(filteredData);
                });
            } else {
                console.error("Category select element not found");
            }
        }
    }

    // Initialize the tracker when DOM is ready
    document.addEventListener('DOMContentLoaded', () => {
        new EnforcementTracker('#enforcement-chart');
    });
})();
</script>